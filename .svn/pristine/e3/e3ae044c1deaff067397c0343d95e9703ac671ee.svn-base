package userInterface;


import java.util.ArrayList;
import javax.swing.table.AbstractTableModel;
import hatalskan.Exam;
import hatalskan.StudentExam;

/**
 * GUI
 * @author Door Guardians
 */
public class GradeFrame extends javax.swing.JFrame {
    
    /**
     * GradeFrame constructor
     * @param exams list of student exams     
     */
    public GradeFrame(ArrayList<Exam> exams) {
        initComponents();
        
        // Create the table to show
        gradeTable.setModel(new GradeTable(exams));
        // Allow the table to be sorted
        gradeTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        gradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "ID", "Raw Grade", "Percentage"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(gradeTable);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable gradeTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    class GradeTable extends AbstractTableModel
    {
        private int rowCount;
        private int columnCount;
        private final String[] columnNames =
            {"Name", "ID", "Score", "Percent", "Scan Order"};
        private ArrayList<ArrayList<Object>> data = 
                new ArrayList<ArrayList<Object>>();
        
        /**
         * GradeTable constructor
         * @param exams 
         */
        public GradeTable(ArrayList<Exam> exams)
        {
            int numRows = 0;
            
            // Count the number of students in the first (cumulative) exam
            numRows += exams.get(0).getStudentExams().size();
            
            rowCount = numRows;
            columnCount = columnNames.length;
            createTable(exams);
        }
        
        /**
         * Gets the number of rows
         * @return Returns number of rows
         */
        @Override
        public int getRowCount() {
            return this.rowCount;
        }

        /**
         * Gets the number of columns
         * @return Returns number of columns
         */
        @Override
        public int getColumnCount() {
            return this.columnCount;
        }
        
        /**
         * Gets the value of at the specified index
         * @param rowIndex
         * @param columnIndex
         * @return The value of table[rowIndex][columnIndex]
         */
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return data.get(rowIndex).get(columnIndex);
        }
        
        @Override
        public String getColumnName(int columnIndex)
        {
            return columnNames[columnIndex];
        }
        
        // Use student exam
        private void createTable(ArrayList<Exam> exams)
        {
            int order = 1;
            // FOR EACH student response in the first (cumulative)
            for (StudentExam studExam1 : exams.get(0).getStudentExams())
            {   
                ArrayList row = new ArrayList<Object>();
                // Add the student's name
                row.add(studExam1.getOwner().getFullName());
                // Add the student's ID
                row.add(studExam1.getOwner().getId());
                // Add the student's Raw Score
                row.add(studExam1.getCorrectCount());
                // Add the student's Percentage
                row.add(studExam1.getPercent());
                // Add the version index
                row.add(order++);

                // Add the row into the table data
                data.add(row);
            }
        }
    }
}
