package userInterface;


import java.util.ArrayList;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.table.AbstractTableModel;
import hatalskan.Exam;

/**
 * GUI.
 * @author Door Guardians
 */
public class StatsFrame extends javax.swing.JFrame {
    
    /**
     * GradeFrame constructor
     * @param stats ExamStatistics object
     */
    public StatsFrame(ArrayList<Exam> exams) {
        initComponents();
        
        // Create the table to show
        statsTable.setModel(new StatisticsTable(exams));
        // Allow the table to be sorted
        statsTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        statsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        statsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "ID", "Raw Grade", "Percentage"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statsTable);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable statsTable;
    // End of variables declaration//GEN-END:variables
    
    class StatisticsTable extends AbstractTableModel
    {
        // The number of rows
        private int rowCount;
        // The number of columns
        private int columnCount;
        // The labels for each column
        private final String[] columnNames =
            {"Version", "High score",
                "Low score", "Mean Score", "Mean Percent",
                "Standard Deviation"};
        // The 2D array of data
        private ArrayList<ArrayList<Object>> data = 
                new ArrayList<ArrayList<Object>>();
        
        /**
         * ScanOrderTable constructor
         * @param exams 
         */
        public StatisticsTable(ArrayList<Exam> exams)
        {
            rowCount = exams.size();
            columnCount = columnNames.length;
            createTable(exams);
        }
        
        /**
         * 
         * @return number of rows
         */
        @Override
        public int getRowCount() {
            return this.rowCount;
        }

        /**
         * 
         * @return number of columns
         */
        @Override
        public int getColumnCount() {
            return this.columnCount;
        }
        
        /**
         * Gets the value of at the specified index
         * @param rowIndex
         * @param columnIndex
         * @return The value of table[rowIndex][columnIndex]
         */
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return data.get(rowIndex).get(columnIndex);
        }
        
        @Override
        public String getColumnName(int columnIndex)
        {
            return columnNames[columnIndex];
        }
        
        // Use stats to create the table
        private void createTable(ArrayList<Exam> exams)
        {
            /* For each version create a row */
            for (Exam exam: exams)
            {
                ArrayList row = new ArrayList<>();
                
                // Add the version
                row.add(exam.getVersion());
                // Add the High score
                row.add(exam.getStats().getHighScore());
                // Add the Low score
                row.add(exam.getStats().getLowScore());
                // Add the Mean score
                row.add(exam.getStats().getMeanScore());
                // Add the mean percent
                row.add(exam.getStats().getMeanPercent());
                // Add the standard deviation
                row.add(exam.getStats().getStDev());
                
                data.add(row);
            }
        }
    }
}
